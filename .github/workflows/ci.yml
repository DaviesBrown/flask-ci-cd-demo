name: CI/CD Pipeline

on:
    push:
        branches: [main]
    pull_request:
        branches: [main]

jobs:
    build-test-lint:
        name: Build, Lint & Test
        runs-on: ubuntu-latest
        strategy:
            matrix:
                python-version: ["3.10", "3.11"]

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Python ${{ matrix.python-version }}
              uses: actions/setup-python@v5
              with:
                  python-version: ${{ matrix.python-version }}

            - name: Install dependencies
              run: |
                  pip install -r requirements.txt

            - name: Run lint
              run: flake8 .

            - name: Install dependencies
              run: pip install pytest pytest-cov

            - name: Run tests
              run: pytest --cov --cov-branch --cov-report=xml

            - name: Upload results to Codecov
              uses: codecov/codecov-action@v5
              with:
                token: ${{ secrets.CODECOV_TOKEN }}

    docker-build:
        name: Build & Push Docker Image
        runs-on: ubuntu-latest
        needs: build-test-lint

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Log in to GitHub Container Registry
              uses: docker/login-action@v3
              with:
                registry: ghcr.io
                username: ${{ github.actor }}
                password: ${{ secrets.CR_PAT }}

            - name: Build Docker image
              env:
                  REPO_OWNER_LOWER: ${{ github.repository_owner }}
              run: |
                  docker build -t ghcr.io/${REPO_OWNER_LOWER,,}/flask-ci-cd-demo:latest .

            - name: Push Docker image
              env:
                  REPO_OWNER_LOWER: ${{ github.repository_owner }}
              run: |
                  docker push ghcr.io/${REPO_OWNER_LOWER,,}/flask-ci-cd-demo:latest

    deploy:
        name: Deploy to Render
        runs-on: ubuntu-latest
        needs: docker-build
        environment: production

        steps:
        - name: Trigger Render Deploy Hook
          run: |
            curl -X POST "${{ secrets.RENDER_DEPLOY_HOOK }}"